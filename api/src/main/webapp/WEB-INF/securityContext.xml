<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- TODO: vsechny staticke a neutorizovane zdroje -->
    <!--    <http pattern="**" security="none"/>-->
    <!-- nahore docasne zakazna bezpecnost pro vsechno -->
    <http pattern="/css/**" security="none"/>
    <http pattern="/test/test.jsp*" security="none"/>
    <!--    <http pattern="/test/login.jsp" security="none"/>
        <http pattern="/test/logout.jsp*" security="none"/>-->

    <!--    <http auto-config='true'>-->

    <!--
    TODO:should be probably changed towards stateless authentication instead of current sessions
    see for example:
    https://dzone.com/articles/how-to-make-a-stateless-session-less-authenticatio
    -->

    <http>

        <!--
        No need for CSFR for API.
        Also without this Tomcat returns 403 for any POST opeartion and it can be hard to track the reason.
        In Spring Security 4.2.9 (unlike 5.1.1) there's this helping error description:
        "Could not verify the provided CSRF token because your session was not found."
        -->
        <csrf disabled="true"/>

        <http-basic/>
        <!--        <form-login login-page='/test/login.jsp'/>-->
        <!--<form-login/>-->
        <intercept-url pattern="/test/admin.jsp" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/test/user.jsp" access="hasRole('ROLE_USER')"/>
        <!--<intercept-url pattern="/denied" access="denyAll"/>
        <intercept-url pattern="/permitted" access="permitAll"/>-->

        <!--alternativa: sice nautentizovany, ale uplatnuji se security filter chains -->
        <!--        <intercept-url pattern="/test/logout.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
        <!--test-->

        <intercept-url pattern="/v3/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="PUT"
                       requires-channel="https"/>
        <intercept-url pattern="/v3/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="POST"
                       requires-channel="https"/>
        <intercept-url pattern="/v3/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="DELETE"
                       requires-channel="https"/>

        <intercept-url pattern="/v4/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="PUT"
                       requires-channel="https"/>
        <intercept-url pattern="/v4/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="POST"
                       requires-channel="https"/>
        <intercept-url pattern="/v4/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="DELETE"
                       requires-channel="https"/>

        <intercept-url pattern="/v5/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="PUT"
                       requires-channel="https"/>
        <intercept-url pattern="/v5/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="POST"
                       requires-channel="https"/>
        <intercept-url pattern="/v5/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="DELETE"
                       requires-channel="https"/>

        <intercept-url pattern="/v6/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="PUT"
                       requires-channel="https"/>
        <intercept-url pattern="/v6/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="POST"
                       requires-channel="https"/>
        <intercept-url pattern="/v6/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')" method="DELETE"
                       requires-channel="https"/>

        <session-management>
            <!--This will prevent a user from logging in multiple times - a second login will cause the first to be invalidated.-->
            <concurrency-control max-sessions="1"/>
            <!--Here the second login would be rejected -->
            <!--<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />-->
        </session-management>
    </http>

    <authentication-manager>
        <authentication-provider ref='authenticationProvider'/>
    </authentication-manager>

    <beans:bean id="authenticationProvider" class="cz.nkp.urnnbn.webcommon.security.CzidloAuthenticationProvider"/>

    <!--this doesn't have to be registered explicitly-->
    <beans:bean id="logListener" class="cz.nkp.urnnbn.webcommon.security.SecurityListener"/>
</beans:beans>
